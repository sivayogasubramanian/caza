// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================ MODELS ================
model User {
  uid String @id

  updatedAt DateTime @updatedAt @map("updated_at")

  applications Application[]

  @@map("users")
}

model Company {
  id         Int     @id @default(autoincrement())
  name       String
  companyUrl String  @map("company_url")
  isVerified Boolean @default(false) @map("is_verified")

  updatedAt DateTime @updatedAt @map("updated_at")

  roles Role[]

  @@map("companies")
}

enum RoleType {
  WINTER_INTERNSHIP
  SPRING_INTERNSHIP
  SUMMER_INTERNSHIP
  FALL_INTERNSHIP
  FULL_TIME
}

model Role {
  id         Int      @id @default(autoincrement())
  company    Company  @relation(fields: [companyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  companyId  Int      @map("company_id")
  title      String
  type       RoleType
  year       Int
  isVerified Boolean  @default(false) @map("is_verified")

  updatedAt DateTime @updatedAt @map("updated_at")

  applications Application[]

  @@map("roles")
}

model Application {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [uid], onUpdate: Cascade, onDelete: Cascade)
  userId String @map("user_id")
  role   Role   @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roleId Int    @map("role_id")

  updatedAt DateTime @updatedAt @map("updated_at")

  applicationStages ApplicationStage[]
  tasks             Task[]

  @@unique([userId, roleId])
  @@map("applications")
}

enum ApplicationStageType {
  APPLIED
  ONLINE_ASSESSMENT
  TECHNICAL
  NON_TECHNICAL
  MIXED
  OFFERED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model ApplicationStage {
  id            Int                  @id @default(autoincrement())
  application   Application          @relation(fields: [applicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  applicationId Int                  @map("application_id")
  type          ApplicationStageType
  date          DateTime
  reaction      Reaction?            @relation(fields: [reactionId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  reactionId    Int?                 @unique @map("reaction_id")

  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("application_stages")
}

model Reaction {
  id               Int               @id @default(autoincrement())
  emojiUnicodeHex  String            @map("emoji_unicode_hex")
  remark           String
  applicationStage ApplicationStage?

  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("reactions")
}

model Task {
  id                   Int         @id @default(autoincrement())
  application          Application @relation(fields: [applicationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  applicationId        Int         @map("application_id")
  title                String
  dueDate              DateTime    @map("due_date")
  notificationDateTime DateTime?   @map("notification_datetime")
  isDone               Boolean     @default(false) @map("is_done")

  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tasks")
}
